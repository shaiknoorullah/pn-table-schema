// generator client {
//     provider        = "prisma-client-js"
//     previewFeatures = ["postgresqlExtensions", "prismaSchemaFolder"]
//     output          = "../client"
// }

// generator dbml {
//     provider   = "prisma-dbml-generator"
//     output     = "./dbml"
//     outputName = "schema.dbml"
// }

// datasource db {
//     provider = "postgresql"
//     url      = env("TENANT_DATABASE_URL")
// }

/**
 * ************************************
 * ************************************
 * ****** Temant_DB Schema  - End *****
 * ************************************
 * ************************************
 */

// model User {
//     id         String @id @default(uuid())
//     //============================ Personal Information ============================//
//     // Will need to encrypt the user data in future //
//     first_name String
//     last_name  String
//     username   String @unique
//     email      String @unique
//     password   String

//     //=================== To Be Updated with Onboarding Completion ===================//

//     bio       String?
//     phone     String?
//     job_title String?
//     address   UserAddress?

//     //================================= System Fields =================================//
//     email_verified Boolean? @default(true)

//     //================================= User Relations =================================//

//     created_by      String?   @map("created_by")
//     created_at      DateTime  @default(now())
//     last_updated_by String?   @map("last_updated_by")
//     last_updated_at DateTime? @updatedAt @map("last_updated_time")
//     deleted_at      DateTime? @map("deleted_time")
//     deleted_by      String?   @map("deleted_by")

//     //================================= Relations =================================//

//     tenant_id        String
//     team_memberships TeamMember[]
//     devices          UserDevice[]
//     messages         Message[]
//     threads          Thread[]
//     Tenant           Tenant       @relation(fields: [tenant_id], references: [id])

//     //================================= Indexes =================================//

//     @@unique([id, first_name, last_name, username, email])
//     @@index([username])
//     @@index([email])
//     @@index([deleted_at])
//     @@index([created_at])
//     @@index([last_updated_at])
//     @@map("users")
// }

// User From Tenant Databases

// model User {
//     id           String    @id @default(uuid())
//     tenant_id    String    @map("tenant_id")
//     name         String?
//     email        String?
//     version      Float?    @default(1.0)
//     is_active    Boolean?  @default(true)
//     device_id    String
//     created_by   String?   @map("created_by")
//     created_at   DateTime  @default(now())
//     updated_by   String?   @map("updated_by")
//     updated_at   DateTime  @updatedAt @map("updated_time")
//     is_deleted   Boolean   @default(false)
//     deleted_time DateTime? @map("deleted_time")

//     Tenant Tenant @relation(fields: [tenant_id], references: [id])

//     @@index([tenant_id])
//     @@index([device_id])
//     @@index([email])
//     @@index([is_deleted, deleted_time])
//     @@index([created_at])
//     @@index([updated_at])
//     @@map("users")
// }

// User From Mailer Database

// model User {
//     id        String    @id @default(auto()) @map("_id") @db.ObjectId
//     email     String    @unique
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     messages  Message[]
//     threads   Thread[]
// }

model UserAddress {
    id String @id @default(uuid())

    //======= Information to update at the time of profile completion after onboarding =======//

    country    String
    short_code String
    state      String
    city       String
    zip        String

    //==================================== User References ====================================//

    created_by      String  @default("system") @map("created_by")
    last_updated_by String  @default("system") @map("last_updated_by")
    deleted_by      String? @map("deleted_by")

    //==================================== Time References ====================================//

    created_at      DateTime  @default(now())
    last_updated_at DateTime  @updatedAt @map("last_updated_at")
    deleted_at      DateTime? @map("deleted_at")

    //======================================= Relations =======================================//

    user_id String @unique
    user    User   @relation(fields: [user_id], references: [id])

    @@unique([country, short_code, state, city, zip, user_id])
    @@index([zip])
    @@index([country])
    @@index([last_updated_at])
    @@index([deleted_at])
    @@index([zip, user_id])
    @@map("user_addresses")
}

model UserDevice {
    id                             String               @id @default(uuid())
    unique_device_signature        String               @unique
    user_id                        String               @unique
    user                           User                 @relation(fields: [user_id], references: [id])
    last_accessed_at               DateTime
    last_accessed_from_location_id String               @unique
    last_accessed_from             UserDeviceLocation?  @relation("last_accessed_from", fields: [last_accessed_from_location_id], references: [id])
    location_history               UserDeviceLocation[]
    deviceMetadata                 Json[]

    @@unique([id, unique_device_signature, user_id])
    @@index([unique_device_signature])
    @@index([user_id])
    @@map("user_devices")
}

model UserDeviceLocation {
    id   String @id @default(uuid())
    // Basic Location Data //
    lat  Float  @db.DoublePrecision
    long Float  @db.DoublePrecision

    // Which device was
    user_id      String      @unique
    last_used_by UserDevice? @relation("last_accessed_from")

    device_id String     @unique
    device    UserDevice @relation(fields: [device_id, user_id], references: [id, user_id])

    @@index([id, device_id])
    @@map("user_device_locations")
}

model TeamMember {
    id           String   @id @default(uuid())
    is_team_lead Boolean  @default(false)
    first_name   String
    last_name    String
    username     String   @unique
    email        String   @unique
    bio          String?
    phone        String?
    user_id      String   @unique
    user         User     @relation(fields: [user_id, first_name, last_name, username, email], references: [id, first_name, last_name, username, email])
    team_ids     String[]
    teams        Team[]

    @@map("team_members")
}

model Team {
    id                String       @id @default(uuid())
    name              String
    description       String
    is_active         Boolean      @default(true)
    //================================ Not Yet Implemented ================================//
    performance_score Float?
    budget            Float?
    goals             String?
    meeting_frequency String?
    //================================ Version Control ====================================//
    version           Float        @default(1.0)
    last_updated_by   String?      @map("last_updated_by")
    last_updated_at   DateTime?    @updatedAt @map("last_updated_time")
    //================================== User References ==================================//
    created_by        String?      @map("created_by")
    deleted_by        String?      @map("deleted_by")
    created_at        DateTime     @default(now())
    deleted_at        DateTime?    @map("deleted_time")
    //===================================== Relations =====================================//
    department_id     String       @unique // Get Teams by department Id
    department_code   String       @unique // Get Teams by department Code
    departments       Department   @relation(fields: [department_id, department_code], references: [id, code])
    team_members      TeamMember[]

    @@index([department_id, department_code])
    @@index([is_active])
    @@index([created_at])
    @@index([last_updated_at])
    @@map("teams")
}

model Department {
    id              String       @id @default(uuid())
    //================================== Department Info ==================================//
    name            String
    description     String
    code            String       @unique
    //================================== Version Control ==================================//
    version         Float        @default(1.0)
    is_active       Boolean      @default(true)
    //================================== User References ==================================//
    created_by      String       @default("system") @map("created_by")
    last_updated_by String       @default("system") @map("last_updated_by")
    deleted_by      String?      @map("deleted_by")
    created_at      DateTime     @default(now())
    last_updated_at DateTime     @default(now()) @updatedAt @map("last_updated_at")
    deleted_at      DateTime?    @map("deleted_at")
    //===================================== Relations =====================================//
    teams           Team[]
    // Parent Department
    parent_id       String?
    parent          Department?  @relation("DepartmentHierarchy", fields: [parent_id], references: [id])
    // Child Department
    children        Department[] @relation("DepartmentHierarchy")

    @@unique([id, code])
    @@index([code])
    @@index([parent_id])
    @@map("departments")
}

/**
 * ************************************
 * ************************************
 * ****** Temant_DB Schema  - End *****
 * ************************************
 * ************************************
 */

// model DB_Cross_Ref_Map {
// }

// model DB_Reference {
//     id          String  @id @default(uuid())
//     name        String
//     type        DB_TYPE
//     code        String
//     description String
// }

// model DB_Connection {
//     id                String  @id @default(uuid())
//     connection_string String
//     secure            Boolean @default(false)
//     environment       DB_ENV  @default(DEV)
// }

// enum DB_ENV {
//     DEV
//     STAGING
//     PROD
// }

// enum DB_TYPE {
//     NO_SQL
//     SQL
//     TIMESERIES
//     OBJ_STORAGE
// }

/**
 * *************************************
 * *************************************
 * ******* Mailer Schema  - Start ******
 * *************************************
 * *************************************
 */

model MessageType {
    id      String        @id @default(auto()) @map("_id") @db.ObjectId
    name    MessageSource @unique
    sources Source[]
}

model Source {
    id       String      @id @default(auto()) @map("_id") @db.ObjectId
    typeId   String      @db.ObjectId
    type     MessageType @relation(fields: [typeId], references: [id])
    messages Message[]
}

model Message {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    userId           String    @db.ObjectId
    user             User      @relation(fields: [userId], references: [id])
    // to store as a copy in tenant db
    messageId        String    @unique
    subject          String?
    receivedDateTime DateTime?
    sentDateTime     DateTime?
    bodyPreview      String?
    createdAt        DateTime  @default(now())
    sender           Json
    recipients       Json?

    // to store in pgai and pgvector
    summary        Json?
    body           String
    ccRecipients   Json?
    bccRecipients  Json?
    replyTo        Json?
    hasAttachments Boolean @default(false)
    metaData       Json
    sourceId       String  @db.ObjectId
    source         Source  @relation(fields: [sourceId], references: [id])

    @@index([userId])
}

model Thread {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    // relation to tenant db - Users table
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    conversationId String
    domain         String
    messageDbId    String  @db.ObjectId
    messageId      String  @unique
    summary        Json?
    parentDbId     String? @db.ObjectId
    parentId       String?
    childDbId      String? @db.ObjectId
    childId        String?
    isRoot         Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, domain])
}

model Conversation {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    domain    String   @unique
    threads   Json[] // Array of threadIds
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Mailer Config Models

enum MailType {
    MAILCOW
    SENDGRID
    MICROSOFT_GRAPH_API
}

enum MessageSource {
    MS_GRAPH
    MAILCOW
    SG
}

/**
 * *************************************
 * *************************************
 * ******** Mailer Schema  - End *******
 * *************************************
 * *************************************
 */

// ATS Database

/**
 * *************************************
 * *************************************
 * ********* ATS Schema  - Start *******
 * *************************************
 * *************************************
 */

// model SubscriptionPlan {
//     id              String    @id @default(uuid())
//     name            String
//     description     String?
//     price           Decimal
//     group_policy_id String
//     duration        Int // in days
//     version         Float     @default(1.0)
//     end_date        DateTime
//     features        String[]
//     is_deleted      Boolean   @default(false)
//     deleted_time    DateTime?
//     created_at      DateTime  @default(now())
//     updated_at      DateTime  @updatedAt @map("updated_time")

//     @@index([group_policy_id])
//     @@index([is_deleted, deleted_time])
//     @@index([end_date])
//     @@map("subscription_plans")
// }

// model Domain {
//     id           String    @id @default(uuid())
//     name         String    @unique
//     description  String?
//     version      Float     @default(1.0)
//     is_active    Boolean   @default(true)
//     created_at   DateTime  @default(now())
//     updated_at   DateTime  @updatedAt @map("updated_time")
//     is_deleted   Boolean   @default(false)
//     deleted_time DateTime?

//     tenant      Tenant       @relation(fields: [tenant_id], references: [id])
//     tenant_id   String
//     status      DomainStatus
//     dnsRecords  DNSRecord[]
//     smtpServers SMTPServer[]
//     mailType    MailType

//     @@index([is_deleted, deleted_time])
//     @@index([is_active])
//     @@map("domains")
// }

// Domain Schema From Mailer Schema

// ===== DOMAIN SCHEMA =====
// model Domain {
//     id          String       @id @default(auto()) @map("_id") @db.ObjectId
//     name        String       @unique
//     status      DomainStatus
//     dnsRecords  DNSRecord[]
//     smtpServers SMTPServer[]
//     mailType    MailType

//     tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//     tenantId  String    @db.ObjectId
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

// model Tenant {
//     id                   String       @id @default(uuid())
//     name                 String
//     subscription_plan_id String?
//     domain_id            String?      @map("domain_id")
//     is_active            Boolean?
//     domains              Domain[]
//     smtpServers          SMTPServer[]
//     version              Float        @default(1.0)
//     group_policy_id      String
//     team_size            String?
//     industry             String?
//     recruitment_type     String?
//     location             String?
//     created_by           String?      @map("created_by")
//     created_at           DateTime     @default(now())
//     updated_by           String?      @map("updated_by")
//     updated_at           DateTime?    @updatedAt @map("updated_time")
//     is_deleted           Boolean      @default(false)
//     deleted_time         DateTime?    @map("deleted_time")

//     users User[]

//     @@index([domain_id])
//     @@index([subscription_plan_id])
//     @@index([group_policy_id])
//     @@index([is_deleted, deleted_time])
//     @@index([created_by])
//     @@map("tenants")
// }

// Tenant Schema from Mailer Schema

// ===== TENANT SCHEMA =====
// model Tenant {
//     id          String       @id @default(auto()) @map("_id") @db.ObjectId
//     name        String
//     domains     Domain[]
//     smtpServers SMTPServer[]
//     createdAt   DateTime     @default(now())
//     updatedAt   DateTime     @updatedAt
//     deleted     Boolean?     @default(false)
//     deletedAt   DateTime?
// }

// model MsCredential {
//     id             String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId       String   @unique
//     msTenantId     String   @unique
//     msClientId     String
//     msClientSecret String
//     createdAt      DateTime @default(now())
//     updatedAt      DateTime @updatedAt
// }

// model SendGridCredential {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId  String   @unique
//     sgApiKey  String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model MailCowCredential {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId  String   @unique
//     mcApiKey  String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model EmailPreference {
//     id       String  @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId String  @unique
//     msg      Boolean
//     sdg      Boolean
// }

// // ===== DNS RECORD SCHEMAS =====
// model DNSRecord {
//     id       String        @id @default(auto()) @map("_id") @db.ObjectId
//     domain   Domain        @relation(fields: [domainId], references: [id])
//     domainId String        @db.ObjectId
//     type     DNSRecordType
//     name     String
//     value    String
//     ttl      Int           @default(3600)
//     priority Int? // For MX records

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?

//     // Specific record types
//     spfRecord   SPFRecord?
//     dkimRecord  DKIMRecord?
//     dmarcRecord DMARCRecord?

//     @@unique([domainId, type, name])
// }

// model SPFRecord {
//     id          String          @id @default(auto()) @map("_id") @db.ObjectId
//     dnsRecord   DNSRecord       @relation(fields: [dnsRecordId], references: [id])
//     dnsRecordId String          @unique @db.ObjectId
//     mechanisms  String[]
//     all         SPFAllDirective

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

// model DKIMRecord {
//     id          String    @id @default(auto()) @map("_id") @db.ObjectId
//     dnsRecord   DNSRecord @relation(fields: [dnsRecordId], references: [id])
//     dnsRecordId String    @unique @db.ObjectId
//     selector    String
//     publicKey   String
//     keyType     String    @default("rsa")

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

// model DMARCRecord {
//     id              String       @id @default(auto()) @map("_id") @db.ObjectId
//     dnsRecord       DNSRecord    @relation(fields: [dnsRecordId], references: [id])
//     dnsRecordId     String       @unique @db.ObjectId
//     policy          DMARCPolicy
//     subdomainPolicy DMARCPolicy?
//     percentage      Int          @default(100)
//     reportFormat    String[]
//     reportInterval  Int          @default(86400)
//     reportURIs      String[]

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

// // ===== SMTP SERVER SCHEMA =====
// model SMTPServer {
//     id              String     @id @default(auto()) @map("_id") @db.ObjectId
//     host            String
//     port            Int
//     username        String
//     password        String
//     isSecure        Boolean    @default(true)
//     isSystemManaged Boolean    @default(false)
//     status          SMTPStatus
//     tenant          Tenant     @relation(fields: [tenantId], references: [id])
//     tenantId        String     @unique @db.ObjectId
//     domain          Domain     @relation(fields: [domainId], references: [id])
//     domainId        String     @db.ObjectId
//     createdAt       DateTime   @default(now())
//     updatedAt       DateTime   @updatedAt
//     deleted         Boolean?   @default(false)
//     deletedAt       DateTime?
// }

// model IMAP {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     host      String
//     port      Int
//     username  String
//     password  String
//     tls       Boolean
//     tenantId  String   @unique @db.ObjectId
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model SgSender {
//     id           String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId     String
//     fromEmail    String
//     replyToEmail String
//     address      String
//     city         String
//     state        String
//     zip          String
//     country      String
//     verified     Boolean
//     createdAt    DateTime @default(now())
//     updatedAt    DateTime @updatedAt

//     @@unique([tenantId, fromEmail])
// }

// enum DomainStatus {
//     PENDING
//     ACTIVE
//     VERIFIED
//     SUSPENDED
// }

// enum DNSRecordType {
//     A
//     AAAA
//     CNAME
//     MX
//     TXT
//     SPF
//     DKIM
//     DMARC
// }

// enum SPFAllDirective {
//     PASS
//     NEUTRAL
//     SOFTFAIL
//     FAIL
// }

// enum DMARCPolicy {
//     NONE
//     QUARANTINE
//     REJECT
// }

// enum SMTPStatus {
//     ACTIVE
//     INACTIVE
//     PENDING_VERIFICATION
// }

/**
 * *************************************
 * *************************************
 * ********* ATS Schema  - End *********
 * *************************************
 * *************************************
 */
