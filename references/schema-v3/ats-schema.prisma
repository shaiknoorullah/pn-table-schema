generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions", "prismaSchemaFolder"]
    output          = "../client"
}

generator dbml {
    provider   = "prisma-dbml-generator"
    output     = "./dbml"
    outputName = "schema.dbml"
}

datasource db {
    provider = "postgresql"
    url      = env("ATS_DATABASE_URL")
}

// model SubscriptionPlan {
//     id              String    @id @default(uuid())
//     name            String
//     description     String?
//     price           Decimal
//     deleted_at      DateTime?
//     created_at      DateTime  @default(now())
//     last_updated_at DateTime  @updatedAt @map("last_updated_at")

//     // @@index([group_policy_id])
//     @@index([deleted_at])
//     // @@index([end_date])
//     @@map("subscription_plans")
// }

model AppModules {
    id          String   @id @default(uuid())
    module_name String   @unique
    // feature_set
    feature_set String[]
}

model BillingCycle {
    id                  String @id @default(uuid())
    name                String
    days                Int    @unique
    discount_percentage Float  @default(0.0) @db.DoublePrecision

    @@map("billing_cycles")
}

model Domain {
    id           String    @id @default(uuid())
    name         String    @unique
    description  String?
    version      Float     @default(1.0)
    is_active    Boolean   @default(true)
    created_at   DateTime  @default(now())
    updated_at   DateTime  @updatedAt @map("updated_time")
    is_deleted   Boolean   @default(false)
    deleted_time DateTime?

    tenant      Tenant       @relation(fields: [tenant_id], references: [id])
    tenant_id   String
    status      DomainStatus
    dnsRecords  DNSRecord[]
    smtpServers SMTPServer[]
    mailType    MailType

    @@index([is_deleted, deleted_time])
    @@index([is_active])
    @@map("domains")
}

// Domain Schema From Mailer Schema

// ===== DOMAIN SCHEMA =====
// model Domain {
//     id          String       @id @default(auto()) @map("_id") @db.ObjectId
//     name        String       @unique
//     status      DomainStatus
//     dnsRecords  DNSRecord[]
//     smtpServers SMTPServer[]
//     mailType    MailType

//     tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
//     tenantId  String    @db.ObjectId
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

model Tenant {
    id                   String       @id @default(uuid())
    name                 String
    subscription_plan_id String?
    domain_id            String?      @map("domain_id")
    is_active            Boolean?
    domains              Domain[]
    smtpServers          SMTPServer[]
    version              Float        @default(1.0)
    group_policy_id      String
    team_size            String?
    industry             String?
    recruitment_type     String?
    location             String?
    created_by           String?      @map("created_by")
    created_at           DateTime     @default(now())
    updated_by           String?      @map("updated_by")
    updated_at           DateTime?    @updatedAt @map("updated_time")
    is_deleted           Boolean      @default(false)
    deleted_time         DateTime?    @map("deleted_time")

    users User[]

    @@index([domain_id])
    @@index([subscription_plan_id])
    @@index([group_policy_id])
    @@index([is_deleted, deleted_time])
    @@index([created_by])
    @@map("tenants")
}

// model MsCredential {
//     id             String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId       String   @unique
//     msTenantId     String   @unique
//     msClientId     String
//     msClientSecret String
//     createdAt      DateTime @default(now())
//     updatedAt      DateTime @updatedAt
// }

// model SendGridCredential {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId  String   @unique
//     sgApiKey  String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model MailCowCredential {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId  String   @unique
//     mcApiKey  String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model EmailPreference {
//     id       String  @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId String  @unique
//     msg      Boolean
//     sdg      Boolean
// }

// // ===== DNS RECORD SCHEMAS =====
// model DNSRecord {
//     id       String        @id @default(auto()) @map("_id") @db.ObjectId
//     domain   Domain        @relation(fields: [domainId], references: [id])
//     domainId String        @db.ObjectId
//     type     DNSRecordType
//     name     String
//     value    String
//     ttl      Int           @default(3600)
//     priority Int? // For MX records

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?

//     // Specific record types
//     spfRecord   SPFRecord?
//     dkimRecord  DKIMRecord?
//     dmarcRecord DMARCRecord?

//     @@unique([domainId, type, name])
// }

// model SPFRecord {
//     id          String          @id @default(auto()) @map("_id") @db.ObjectId
//     dnsRecord   DNSRecord       @relation(fields: [dnsRecordId], references: [id])
//     dnsRecordId String          @unique @db.ObjectId
//     mechanisms  String[]
//     all         SPFAllDirective

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

// model DKIMRecord {
//     id          String    @id @default(auto()) @map("_id") @db.ObjectId
//     dnsRecord   DNSRecord @relation(fields: [dnsRecordId], references: [id])
//     dnsRecordId String    @unique @db.ObjectId
//     selector    String
//     publicKey   String
//     keyType     String    @default("rsa")

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

// model DMARCRecord {
//     id              String       @id @default(auto()) @map("_id") @db.ObjectId
//     dnsRecord       DNSRecord    @relation(fields: [dnsRecordId], references: [id])
//     dnsRecordId     String       @unique @db.ObjectId
//     policy          DMARCPolicy
//     subdomainPolicy DMARCPolicy?
//     percentage      Int          @default(100)
//     reportFormat    String[]
//     reportInterval  Int          @default(86400)
//     reportURIs      String[]

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deleted   Boolean?  @default(false)
//     deletedAt DateTime?
// }

// // ===== SMTP SERVER SCHEMA =====
// model SMTPServer {
//     id              String     @id @default(auto()) @map("_id") @db.ObjectId
//     host            String
//     port            Int
//     username        String
//     password        String
//     isSecure        Boolean    @default(true)
//     isSystemManaged Boolean    @default(false)
//     status          SMTPStatus
//     tenant          Tenant     @relation(fields: [tenantId], references: [id])
//     tenantId        String     @unique @db.ObjectId
//     domain          Domain     @relation(fields: [domainId], references: [id])
//     domainId        String     @db.ObjectId
//     createdAt       DateTime   @default(now())
//     updatedAt       DateTime   @updatedAt
//     deleted         Boolean?   @default(false)
//     deletedAt       DateTime?
// }

// model IMAP {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     host      String
//     port      Int
//     username  String
//     password  String
//     tls       Boolean
//     tenantId  String   @unique @db.ObjectId
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model SgSender {
//     id           String   @id @default(auto()) @map("_id") @db.ObjectId
//     tenantId     String
//     fromEmail    String
//     replyToEmail String
//     address      String
//     city         String
//     state        String
//     zip          String
//     country      String
//     verified     Boolean
//     createdAt    DateTime @default(now())
//     updatedAt    DateTime @updatedAt

//     @@unique([tenantId, fromEmail])
// }

// enum DomainStatus {
//     PENDING
//     ACTIVE
//     VERIFIED
//     SUSPENDED
// }

// enum DNSRecordType {
//     A
//     AAAA
//     CNAME
//     MX
//     TXT
//     SPF
//     DKIM
//     DMARC
// }

// enum SPFAllDirective {
//     PASS
//     NEUTRAL
//     SOFTFAIL
//     FAIL
// }

// enum DMARCPolicy {
//     NONE
//     QUARANTINE
//     REJECT
// }

// enum SMTPStatus {
//     ACTIVE
//     INACTIVE
//     PENDING_VERIFICATION
// }

/**
 * *************************************
 * *************************************
 * ********* ATS Schema  - End *********
 * *************************************
 * *************************************
 */
