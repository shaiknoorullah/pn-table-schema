// prisma/schema.prisma

// ==================== Core User Management ====================

model User {
    id              String              @id @default(cuid())
    email           String              @unique
    name            String?
    role            UserRole            @default(USER)
    status          UserStatus          @default(ACTIVE)
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    lastLoginAt     DateTime?
    // Relationships
    auditLogs       AuditLog[]
    createdPolicies RestrictionPolicy[] @relation("PolicyCreator")
    notifications   Notification[]
    salesActivities SalesActivity[]     @relation("SalesRepActivities")
}

enum UserRole {
    SUPER_ADMIN
    SALES_REP
    ENGINEER
    ACCOUNTS
    MARKETING
    USER
}

enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
}

// Resource and Service Management
model Resource {
    id           String             @id @default(uuid())
    name         String             @unique
    description  String?
    type         ResourceType // API, SERVICE, AI_MODEL
    quotaLimits  Json // Default resource quotas
    rateLimits   Json // Rate limiting rules
    modules      Module[]
    metrics      MetricDefinition[]
    usageEvents  UsageEvent[]
    billingRules BillingRule[]
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
}

enum ResourceType {
    API
    SERVICE
    AI_MODEL
    INTEGRATION
    STORAGE
}

model Module {
    id          String    @id @default(uuid())
    name        String
    resource    Resource  @relation(fields: [resourceId], references: [id])
    resourceId  String
    features    Feature[]
    quotaLimits Json
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model FeatureCategory {
    id           String    @id @default(cuid())
    name         String    @unique // e.g., "Fundamentals", "Visualizations", "Project Management"
    displayOrder Int
    description  String?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    // Relationships
    features     Feature[]
}

model Feature {
    id           String             @id @default(uuid())
    name         String
    module       Module             @relation(fields: [moduleId], references: [id])
    moduleId     String
    categoryId   String
    displayName  String
    description  String
    type         FeatureType
    defaultValue String? // JSON string for default limits/settings
    isNew        Boolean            @default(false)
    status       FeatureStatus      @default(ACTIVE)
    displayOrder Int
    metrics      MetricDefinition[]
    category     FeatureCategory    @relation(fields: [categoryId], references: [id])
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
}

enum ModuleStatus {
    ACTIVE
    INACTIVE
    DEPRECATED
}

enum FeatureStatus {
    ACTIVE
    INACTIVE
    DEPRECATED
    BETA
}

enum FeatureType {
    BOOLEAN
    NUMERIC
    TIERED
    METERED
}

// Subscription and Billing
model SubscriptionPlan {
    id           String          @id @default(uuid())
    name         String          @unique
    description  String?
    type         PlanType
    interval     BillingInterval
    price        Decimal
    features     Json // Enabled features
    quotas       Json // Plan-specific quotas
    trialDays    Int             @default(90)
    billingRules BillingRule[]
    tenants      Tenant[]
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
}

enum PlanType {
    FREE
    STARTER
    PROFESSIONAL
    ENTERPRISE
    CUSTOM
}

enum BillingInterval {
    MONTHLY
    YEARLY
    CUSTOM
}

model BillingRule {
    id               String           @id @default(uuid())
    name             String
    resource         Resource         @relation(fields: [resourceId], references: [id])
    resourceId       String
    plan             SubscriptionPlan @relation(fields: [planId], references: [id])
    planId           String
    metricDefinition MetricDefinition @relation(fields: [metricId], references: [id])
    metricId         String
    pricingModel     PricingModel
    pricingTiers     Json // Pricing tiers configuration
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
}

enum PricingModel {
    FLAT_RATE
    PER_UNIT
    TIERED
    VOLUME
    PACKAGE
    CUSTOM
}

// Usage Metering
model MetricDefinition {
    id           String          @id @default(uuid())
    name         String
    type         MetricType
    resource     Resource        @relation(fields: [resourceId], references: [id])
    resourceId   String
    feature      Feature?        @relation(fields: [featureId], references: [id])
    featureId    String?
    aggregation  AggregationType
    unit         String?
    billingRules BillingRule[]
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
}

enum MetricType {
    COUNT
    GAUGE
    HISTOGRAM
    DURATION
    AI_TOKENS
    API_CALLS
    STORAGE_SIZE
}

enum AggregationType {
    SUM
    AVG
    MAX
    MIN
    PERCENTILE
    UNIQUE_COUNT
}

model UsageEvent {
    id         String   @id @default(uuid())
    resource   Resource @relation(fields: [resourceId], references: [id])
    resourceId String
    tenant     Tenant   @relation(fields: [tenantId], references: [id])
    tenantId   String
    metricName String
    value      Float
    timestamp  DateTime @default(now())
    metadata   Json? // Additional context
}

// ==================== Tenant Management ====================
model Tenant {
    id               String           @id @default(uuid())
    name             String
    status           TenantStatus
    subscriptionPlan SubscriptionPlan @relation(fields: [planId], references: [id])
    planId           String
    customQuotas     Json? // Override default plan quotas
    billingSettings  Json // Billing configuration
    usageEvents      UsageEvent[]

    domain_id        String?      @map("domain_id")
    is_active        Boolean?
    domains          Domain[]
    smtpServers      SMTPServer[]
    version          Float        @default(1.0)
    group_policy_id  String
    team_size        String?
    industry         String?
    recruitment_type String?
    location         String?
    created_by       String?      @map("created_by")
    created_at       DateTime     @default(now())

    configurations TenantConfiguration[]
    usageMetrics   UsageMetric[]
    apiKeys        ApiKey[]
    timezone       String // add to user as well.
    trialEndsAt    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([domain_id])
    @@index([subscription_plan_id])
    @@index([group_policy_id])
    @@index([deleted_time])
    @@index([created_by])
    @@map("tenants")
}

enum TenantStatus {
    TRIAL
    ACTIVE
    SUSPENDED
    CANCELLED
}

// ==================== Tenant Configuration ====================

model TenantConfiguration {
    id        String            @id @default(cuid())
    tenantId  String
    policyId  String
    config    String // JSON string for configuration
    status    ConfigStatus      @default(ACTIVE)
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
    // Relationships
    tenant    Tenant            @relation(fields: [tenantId], references: [id])
    policy    RestrictionPolicy @relation(fields: [policyId], references: [id])
}

enum ConfigStatus {
    ACTIVE
    INACTIVE
    PENDING
}

model MsCredential {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    tenantId       String   @unique
    msTenantId     String   @unique
    msClientId     String
    msClientSecret String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model SendGridCredential {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    tenantId  String   @unique
    sgApiKey  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MailCowCredential {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    tenantId  String   @unique
    mcApiKey  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model EmailPreference {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    tenantId String  @unique
    msg      Boolean
    sdg      Boolean
}

// ===== DNS RECORD SCHEMAS =====
model DNSRecord {
    id       String        @id @default(auto()) @map("_id") @db.ObjectId
    domain   Domain        @relation(fields: [domainId], references: [id])
    domainId String        @db.ObjectId
    type     DNSRecordType
    name     String
    value    String
    ttl      Int           @default(3600)
    priority Int? // For MX records

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean?  @default(false)
    deletedAt DateTime?

    // Specific record types
    spfRecord   SPFRecord?
    dkimRecord  DKIMRecord?
    dmarcRecord DMARCRecord?

    @@unique([domainId, type, name])
}

model SPFRecord {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    dnsRecord   DNSRecord       @relation(fields: [dnsRecordId], references: [id])
    dnsRecordId String          @unique @db.ObjectId
    mechanisms  String[]
    all         SPFAllDirective

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean?  @default(false)
    deletedAt DateTime?
}

model DKIMRecord {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    dnsRecord   DNSRecord @relation(fields: [dnsRecordId], references: [id])
    dnsRecordId String    @unique @db.ObjectId
    selector    String
    publicKey   String
    keyType     String    @default("rsa")

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean?  @default(false)
    deletedAt DateTime?
}

model DMARCRecord {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    dnsRecord       DNSRecord    @relation(fields: [dnsRecordId], references: [id])
    dnsRecordId     String       @unique @db.ObjectId
    policy          DMARCPolicy
    subdomainPolicy DMARCPolicy?
    percentage      Int          @default(100)
    reportFormat    String[]
    reportInterval  Int          @default(86400)
    reportURIs      String[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean?  @default(false)
    deletedAt DateTime?
}

// ===== SMTP SERVER SCHEMA =====
model SMTPServer {
    id              String     @id @default(auto()) @map("_id") @db.ObjectId
    host            String
    port            Int
    username        String
    password        String
    isSecure        Boolean    @default(true)
    isSystemManaged Boolean    @default(false)
    status          SMTPStatus
    tenant          Tenant     @relation(fields: [tenantId], references: [id])
    tenantId        String     @unique @db.ObjectId
    domain          Domain     @relation(fields: [domainId], references: [id])
    domainId        String     @db.ObjectId
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    deleted         Boolean?   @default(false)
    deletedAt       DateTime?
}

model IMAP {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    host      String
    port      Int
    username  String
    password  String
    tls       Boolean
    tenantId  String   @unique @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SgSender {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    tenantId     String
    fromEmail    String
    replyToEmail String
    address      String
    city         String
    state        String
    zip          String
    country      String
    verified     Boolean
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([tenantId, fromEmail])
}

enum DomainStatus {
    PENDING
    ACTIVE
    VERIFIED
    SUSPENDED
}

enum DNSRecordType {
    A
    AAAA
    CNAME
    MX
    TXT
    SPF
    DKIM
    DMARC
}

enum SPFAllDirective {
    PASS
    NEUTRAL
    SOFTFAIL
    FAIL
}

enum DMARCPolicy {
    NONE
    QUARANTINE
    REJECT
}

enum SMTPStatus {
    ACTIVE
    INACTIVE
    PENDING_VERIFICATION
}

// ==================== API Management ====================

model ApiKey {
    id         String    @id @default(cuid())
    tenantId   String
    name       String
    key        String    @unique
    scope      String[] // Array of permitted scopes
    expiresAt  DateTime?
    lastUsedAt DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    // Relationships
    tenant     Tenant    @relation(fields: [tenantId], references: [id])
}

// ==================== Marketing & Communication ====================

model Announcement {
    id            String             @id @default(cuid())
    title         String
    content       String
    type          AnnouncementType
    status        AnnouncementStatus @default(DRAFT)
    publishAt     DateTime?
    expiresAt     DateTime?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    // Relationships
    notifications Notification[]
}

model Notification {
    id             String             @id @default(cuid())
    userId         String
    announcementId String?
    title          String
    content        String
    type           NotificationType
    status         NotificationStatus @default(UNREAD)
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
    // Relationships
    user           User               @relation(fields: [userId], references: [id])
    announcement   Announcement?      @relation(fields: [announcementId], references: [id])
}

enum AnnouncementType {
    FEATURE_UPDATE
    MAINTENANCE
    PROMOTION
    GENERAL
}

enum AnnouncementStatus {
    DRAFT
    SCHEDULED
    PUBLISHED
    ARCHIVED
}

enum NotificationType {
    ANNOUNCEMENT
    SYSTEM
    BILLING
    SECURITY
}

enum NotificationStatus {
    UNREAD
    READ
    ARCHIVED
}

// Logging and Monitoring
// model AuditLog {
//     id         String   @id @default(uuid())
//     tenantId   String
//     resourceId String?
//     userId     String?
//     action     String
//     details    Json
//     metadata   Json? // Additional context
//     timestamp  DateTime @default(now())
// }

// Integration with External Services
model ExternalIntegration {
    id          String          @id @default(uuid())
    type        IntegrationType
    config      Json // Integration-specific configuration
    credentials Json // Encrypted credentials
    enabled     Boolean         @default(true)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
}

enum IntegrationType {
    LAGO
    OPENMETER
    FLUENTD
    LOKI
    STRIPE
    CUSTOM
}

// ==================== Billing & Payments ====================

model Invoice {
    id              String             @id @default(cuid())
    subscriptionId  String
    amount          Decimal
    currency        String             @default("USD")
    status          InvoiceStatus
    dueDate         DateTime
    paidAt          DateTime?
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt
    // Relationships
    subscription    TenantSubscription @relation(fields: [subscriptionId], references: [id])
    payments        Payment[]
    stripeInvoiceId String?            @unique
}

model Payment {
    id              String        @id @default(cuid())
    invoiceId       String
    amount          Decimal
    currency        String        @default("USD")
    status          PaymentStatus
    paymentMethod   PaymentMethod
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    // Relationships
    invoice         Invoice       @relation(fields: [invoiceId], references: [id])
    stripePaymentId String?       @unique
}

enum InvoiceStatus {
    DRAFT
    SENT
    PAID
    VOID
    PAST_DUE
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}

enum PaymentMethod {
    CREDIT_CARD
    BANK_TRANSFER
    WIRE
    OTHER
}

// ==================== Sales & Activity Tracking ====================

model SalesActivity {
    id          String       @id @default(cuid())
    salesRepId  String
    tenantId    String?
    type        ActivityType
    description String
    outcome     String?
    scheduledAt DateTime?
    completedAt DateTime?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    // Relationships
    salesRep    User         @relation("SalesRepActivities", fields: [salesRepId], references: [id])
}

enum ActivityType {
    CALL
    EMAIL
    MEETING
    DEMO
    FOLLOW_UP
}
