// generator client {
//     provider        = "prisma-client-js"
//     previewFeatures = ["postgresqlExtensions", "prismaSchemaFolder"]
//     output          = "../client"
// }

// generator dbml {
//     provider   = "prisma-dbml-generator"
//     output     = "./dbml"
//     outputName = "schema.dbml"
// }

// datasource db {
//     provider = "postgresql"
//     url      = env("TENANT_DATABASE_URL")
// }

// model User {
//     id                   String    @id @default(uuid())
//     tenant_id            String    @map("tenant_id")
//     name                 String?
//     username             String?   @unique
//     bio                  String?
//     email                String    @unique
//     phone                String?
//     email_verified       Boolean?  @default(true)
//     password             String?
//     role_id              String?
//     version              Float     @default(1.0)
//     device_id            String?   @unique
//     group_user_policy_id String?   @map("group_user_policy_id")
//     created_by           String?   @map("created_by")
//     created_at           DateTime  @default(now())
//     updated_by           String?   @map("updated_by")
//     updated_at           DateTime? @updatedAt @map("updated_time")
//     is_deleted           Boolean   @default(false)
//     deleted_time         DateTime? @map("deleted_time")
//     deleted_by           String?   @map("deleted_by")

//     // ABAC attributes (now as relations)
//     department_id   String?
//     department      Department? @relation(fields: [department_id], references: [id])
//     job_title       String?
//     location        String?
//     clearance_level String?

//     // Team relations
//     team_leads      Team[] @relation("TeamLead")
//     member_of_teams Team[] @relation("TeamMembers")

//     user_attributes UserAttribute[]

//     @@unique([id, username])
//     @@index([tenant_id])
//     @@index([email])
//     @@index([role_id])
//     @@index([group_user_policy_id])
//     @@index([is_deleted, deleted_time])
//     @@index([department_id, job_title, location, clearance_level])
//     @@index([created_at])
//     @@index([updated_at])
//     @@map("users")
// }

// model Team {
//     id                String      @id @default(uuid())
//     name              String
//     description       String?
//     tenant_id         String
//     team_lead_id      String
//     team_lead         User        @relation("TeamLead", fields: [team_lead_id], references: [id])
//     members           User[]      @relation("TeamMembers")
//     department_id     String?
//     department        Department? @relation(fields: [department_id], references: [id])
//     project           String?
//     is_active         Boolean     @default(true)
//     performance_score Float?
//     budget            Float?
//     goals             String?
//     version           Float       @default(1.0)
//     meeting_frequency String?
//     created_by        String?     @map("created_by")
//     created_at        DateTime    @default(now())
//     updated_by        String?     @map("updated_by")
//     updated_at        DateTime?   @updatedAt @map("updated_time")
//     is_deleted        Boolean     @default(false)
//     deleted_time      DateTime?   @map("deleted_time")
//     deleted_by        String?     @map("deleted_by")

//     @@index([tenant_id])
//     @@index([team_lead_id])
//     @@index([department_id])
//     @@index([is_active])
//     @@index([created_at])
//     @@index([updated_at])
//     @@map("teams")
// }

// model Department {
//     id           String       @id @default(uuid())
//     name         String
//     description  String?
//     code         String?      @unique
//     parent_id    String?
//     tenant_id    String?
//     user_id      String?
//     version      Float        @default(1.1)
//     parent       Department?  @relation("DepartmentHierarchy", fields: [parent_id], references: [id])
//     children     Department[] @relation("DepartmentHierarchy")
//     users        User[]
//     teams        Team[]
//     is_active    Boolean      @default(true)
//     created_by   String?      @map("created_by")
//     created_at   DateTime     @default(now())
//     updated_by   String?      @map("updated_by")
//     updated_at   DateTime?    @updatedAt @map("updated_time")
//     is_deleted   Boolean      @default(false)
//     deleted_time DateTime?    @map("deleted_time")
//     deleted_by   String?      @map("deleted_by")

//     @@index([parent_id])
//     @@map("departments")
// }

// model Attribute {
//     id           String    @id @default(uuid())
//     name         String
//     type         String
//     description  String?
//     tenant_id    String    @map("tenant_id")
//     user_id      String    @map("user_id")
//     version      Float     @default(1.0)
//     created_by   String?   @map("created_by")
//     created_at   DateTime  @default(now())
//     updated_by   String?   @map("updated_by")
//     updated_at   DateTime  @updatedAt @map("updated_time")
//     is_deleted   Boolean   @default(false)
//     deleted_time DateTime? @map("deleted_time")
//     deleted_by   String?   @map("deleted_by")

//     user_attributes UserAttribute[]

//     @@index([name, type])
//     @@index([tenant_id])
//     @@index([user_id])
//     @@index([is_deleted, deleted_time])
//     @@index([created_at])
//     @@index([updated_at])
//     @@map("attributes")
// }

// model UserAttribute {
//     id           String    @id @default(uuid())
//     tenant_id    String    @map("tenant_id")
//     user_id      String    @map("user_id")
//     attribute_id String
//     version      Float     @default(1.0)
//     value        String?
//     created_by   String?   @map("created_by")
//     created_at   DateTime  @default(now())
//     updated_by   String?   @map("updated_by")
//     updated_at   DateTime  @updatedAt @map("updated_time")
//     is_deleted   Boolean   @default(false)
//     deleted_time DateTime? @map("deleted_time")
//     deleted_by   String?   @map("deleted_by")

//     user      User      @relation(fields: [user_id], references: [id])
//     attribute Attribute @relation(fields: [attribute_id], references: [id])

//     @@unique([user_id, attribute_id])
//     @@index([user_id])
//     @@index([attribute_id])
//     @@index([is_deleted, deleted_time])
//     @@index([created_at])
//     @@index([updated_at])
//     @@map("user_attributes")
// }

// /**
//  * ***********************************
//  * *************************************
//  * ** Dynamic Table Schema  - Start ****
//  * *************************************
//  * ************************************
//  */

// model TableMeta {
//     id        String @id @default(uuid())
//     //================== redundant fields need to remove ==================//
//     tenant_id String @map("tenant_id")
//     user_id   String @map("user_id")

//     //========================= frontend specific =========================//

//     name        String  @unique // display name
//     description String? // description of the table
//     icon        String? // sidebar table Icon
//     version     Float   @default(1.0) // current schema version of the table

//     //============================ core fields ============================//

//     fields           Field[]
//     relatedFields    Field[]            @relation("RelatedTable")
//     views            View[]
//     relationsFrom    TableRelation[]    @relation("SourceTable")
//     relationsTo      TableRelation[]    @relation("TargetTable")
//     record           Record[]
//     tableMetaHistory TableMetaHistory[] // schema change history of the table

//     //===========================  TO BE REMOVED ===========================//

//     recordHistory RecordHistory[]
//     notes         Notes[]

//     // =====================================================================//

//     created_by   String?   @map("created_by")
//     updated_by   String?   @map("updated_by")
//     deleted_by   String?   @map("deleted_by")
//     created_at   DateTime  @default(now())
//     updated_at   DateTime  @updatedAt @map("updated_time")
//     deleted_time DateTime? @map("deleted_time")

//     //========================== for internal use ===========================//

//     status        StatusEnum @default(ACTIVE) // table status
//     db_table_name String     @unique @map("db_table_name")

//     //=============================== Indexes ===============================//

//     @@index([tenant_id])
//     @@index([user_id])
//     @@index([db_table_name])
//     @@index([deleted_time])
//     @@index([created_at])
//     @@index([updated_at])
//     //================================= Maps =================================//
//     @@map("table_meta")
// }

// model Field {
//     id       String @id @default(uuid()) @map("id")
//     table_id String @map("table_id")

//     //================== redundant fields need to remove ==================//

//     tenant_id String @map("tenant_id")
//     user_id   String @map("user_id")

//     //======================== frontend specific fields ========================//

//     name                   String
//     description            String?
//     options                String? //
//     type                   FieldType
//     cell_value_type        CellValueType  @map("cell_value_type")
//     is_multiple_cell_value Boolean?       @map("is_multiple_cell_value")
//     db_field_type          DBFieldType    @map("db_field_type")
//     db_field_name          String         @map("db_field_name")
//     status                 StatusEnum     @default(ACTIVE)
//     not_null               Boolean?       @map("not_null")
//     unique                 Boolean?
//     is_primary             Boolean?       @map("is_primary")
//     is_computed            Boolean?       @map("is_computed")
//     is_lookup              Boolean?       @map("is_lookup")
//     is_pending             Boolean?       @map("is_pending")
//     has_error              Boolean?       @map("has_error")
//     lookup_linked_field_id String?        @map("lookup_linked_field_id")
//     lookup_options         String?        @map("lookup_options")
//     related_table_id       String?        @map("related_table_id")
//     version                Float          @default(1.0)
//     created_by             String?        @map("created_by")
//     created_at             DateTime       @default(now())
//     updated_by             String?        @map("updated_by")
//     updated_at             DateTime       @updatedAt @map("updated_time")
//     deleted_time           DateTime?      @map("deleted_time")
//     deleted_by             String?        @map("deleted_by")
//     table                  TableMeta      @relation(fields: [table_id], references: [id])
//     datas                  Data[]
//     relatedTable           TableMeta?     @relation("RelatedTable", fields: [related_table_id], references: [id])
//     history                FieldHistory[]
//     notes                  Notes[]

//     @@unique([table_id, name])
//     @@index([table_id])
//     @@index([type])
//     @@index([cell_value_type])
//     @@index([db_field_type])
//     @@index([db_field_name])
//     @@index([is_primary])
//     @@index([is_computed])
//     @@index([is_lookup])
//     @@index([lookup_linked_field_id])
//     @@index([related_table_id])
//     @@index([deleted_time])
//     @@index([created_at])
//     @@index([updated_at])
//     @@map("field")
// }

// model TableMetaHistory {
//     id            String    @id @default(uuid())
//     table_meta_id String
//     name          String
//     tenant_id     String
//     user_id       String
//     description   String?
//     icon          String?
//     db_table_name String
//     version       Float
//     created_by    String?
//     created_at    DateTime
//     updated_by    String?
//     updated_at    DateTime
//     deleted_time  DateTime?
//     deleted_by    String?
//     changed_at    DateTime  @default(now())
//     changed_by    String?
//     tableMeta     TableMeta @relation(fields: [table_meta_id], references: [id])

//     @@index([table_meta_id])
//     @@map("table_meta_history")
// }

// model FieldHistory {
//     id            String   @id @default(uuid())
//     field_id      String
//     field         Field    @relation(fields: [field_id], references: [id])
//     version       Int
//     name          String
//     type          String
//     db_field_type String
//     db_field_name String
//     description   String?
//     previous_data Json
//     new_data      Json
//     tenant_id     String
//     changed_by    String
//     changed_at    DateTime @default(now())

//     @@index([field_id])
//     @@index([tenant_id])
// }

// // used to store the history of the record
// model RecordHistory {
//     id         String              @id @default(uuid())
//     record_id  String
//     table_id   String
//     table      TableMeta           @relation(fields: [table_id], references: [id])
//     version    Int
//     action     RecordOperationEnum
//     data       Json
//     tenant_id  String
//     created_by String
//     created_at DateTime            @default(now())
//     metadata   Json?

//     @@index([record_id])
//     @@index([table_id])
//     @@index([tenant_id])
//     @@map("record_history")
// }

// // table relation
// model TableRelation {
//     id              String       @id @default(uuid())
//     source_table_id String
//     target_table_id String
//     source_field_id String
//     target_field_id String?
//     relation_type   RelationType
//     tenant_id       String
//     user_id         String?
//     created_by      String
//     created_at      DateTime     @default(now())
//     updated_by      String?
//     updated_at      DateTime     @updatedAt
//     deleted_time    DateTime?
//     deleted_by      String?

//     sourceTable TableMeta @relation("SourceTable", fields: [source_table_id], references: [id])
//     targetTable TableMeta @relation("TargetTable", fields: [target_table_id], references: [id])

//     @@index([source_table_id])
//     @@index([target_table_id])
//     @@index([tenant_id])
//     @@map("table_relation")
// }

// // not being used
// model View {
//     id           String    @id @default(uuid())
//     name         String
//     description  String?
//     table_id     String    @map("table_id")
//     type         ViewType
//     sort         String?
//     filter       String?
//     group        String?
//     options      String?
//     version      Float     @default(1.0)
//     column_meta  String    @map("column_meta")
//     enable_share Boolean?  @map("enable_share")
//     share_id     String?   @map("share_id")
//     share_meta   String?   @map("share_meta")
//     created_by   String?   @map("created_by")
//     created_at   DateTime  @default(now())
//     updated_by   String?   @map("updated_by")
//     updated_at   DateTime  @updatedAt @map("updated_time")
//     deleted_time DateTime? @map("deleted_time")
//     deleted_by   String?   @map("deleted_by")
//     table        TableMeta @relation(fields: [table_id], references: [id])

//     @@unique([table_id, name])
//     @@index([table_id])
//     @@index([type])
//     @@index([enable_share])
//     @@index([share_id])
//     @@index([deleted_time])
//     @@index([created_at])
//     @@index([updated_at])
//     @@map("view")
// }

// // not being used
// model Record {
//     id           String    @id @default(uuid())
//     table_id     String    @map("table_id")
//     user_id      String    @map("user_id")
//     tenant_id    String    @map("tenant_id")
//     created_at   DateTime  @default(now())
//     updated_at   DateTime  @updatedAt
//     deleted_time DateTime? @map("deleted_time")
//     deleted_by   String?   @map("deleted_by")
//     table        TableMeta @relation(fields: [table_id], references: [id])
//     data         Data[]

//     @@index([table_id])
//     @@index([user_id])
//     @@index([tenant_id])
//     @@map("data")
// }

// // not being used
// model Data {
//     id         String   @id @default(uuid())
//     record_id  String   @map("record_id")
//     field_id   String   @map("field_id")
//     value      String?
//     created_at DateTime @default(now())
//     updated_at DateTime @updatedAt
//     record     Record   @relation(fields: [record_id], references: [id])
//     field      Field    @relation(fields: [field_id], references: [id])

//     @@index([record_id])
//     @@index([field_id])
//     @@map("record")
// }

// model Notes {
//     id               String    @id @default(cuid())
//     tableId          String    @map("table_id")
//     fieldId          String    @map("field_id")
//     note             String
//     createdTime      DateTime  @default(now()) @map("created_time")
//     lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
//     createdBy        String    @map("created_by")
//     lastModifiedBy   String?   @map("last_modified_by")

//     table TableMeta @relation(fields: [tableId], references: [id])
//     field Field     @relation(fields: [fieldId], references: [id])

//     @@index([tableId, fieldId])
//     @@map("notes")
// }

// // *************************************
// // *************************************
// // *** Dynamic Table Schema  - End ***
// // *************************************
// // *************************************

// // New Dynamic Tables Enums
// enum DBFieldType {
//     SMALLINT
//     INTEGER
//     BIGINT
//     DECIMAL
//     NUMERIC
//     REAL
//     DOUBLE_PRECISION
//     SERIAL
//     BIGSERIAL
//     CHAR
//     VARCHAR
//     TEXT
//     DATE
//     TIME
//     TIMESTAMP
//     TIMESTAMPTZ
//     INTERVAL
//     BOOLEAN
//     UUID
//     JSON
//     JSONB
//     BYTEA
//     INET
//     CIDR
//     MACADDR
//     TSVECTOR
//     TSQUERY
//     POINT
//     LINE
//     LSEG
//     BOX
//     CIRCLE
//     ARRAY
// }

// enum RelationType {
//     ONE_TO_ONE
//     ONE_TO_MANY
//     MANY_TO_ONE
//     MANY_TO_MANY
// }

// enum FieldType {
//     TEXT
//     NUMBER
//     DATE
//     BOOLEAN
//     LOOKUP
//     MULTISELECT
//     ATTACHMENT
// }

// enum CellValueType {
//     STRING
//     INTEGER
//     FLOAT
//     BOOLEAN
//     DATE
//     JSON
// }

// enum ViewType {
//     GRID
//     CALENDAR
//     KANBAN
//     GALLERY
// }

// enum StatusEnum {
//     ACTIVE
//     IN_ACTIVE
// }

// enum RecordOperationEnum {
//     INSERT
//     UPDATE
//     DELETE
// }
